# Script ch·∫°y test tr√™n m√¥i tr∆∞·ªùng Production
param(
    [Parameter(Mandatory=$true)]
    [string]$ProductionUrl,
    [string]$TestSuite = "all",
    [switch]$Headed = $false,
    [switch]$Debug = $false
)

Write-Host "üöÄ B·∫Øt ƒë·∫ßu ch·∫°y E2E Tests tr√™n m√¥i tr∆∞·ªùng PRODUCTION" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green
Write-Host "üåê Production URL: $ProductionUrl" -ForegroundColor Cyan

# Set environment variables
$env:NODE_ENV = "production"
$env:BASE_URL = $ProductionUrl

# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
if (!(Test-Path "logs")) {
    New-Item -ItemType Directory -Path "logs"
}

$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$logFile = "logs/test-prod-$timestamp.log"

Write-Host "üìù Log file: $logFile" -ForegroundColor Yellow

# Function ƒë·ªÉ log v·ªõi timestamp
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timeStamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timeStamp] [$Level] $Message"
    Write-Host $logMessage
    Add-Content -Path $logFile -Value $logMessage
}

try {
    Write-Log "Ki·ªÉm tra m√¥i tr∆∞·ªùng production..."
    
    # Ki·ªÉm tra xem production site c√≥ accessible kh√¥ng
    try {
        $response = Invoke-WebRequest -Uri $ProductionUrl -TimeoutSec 10 -UseBasicParsing
        Write-Log "‚úÖ Production site accessible (Status: $($response.StatusCode))"
        
        # Ki·ªÉm tra th√™m m·ªôt s·ªë th√¥ng tin c∆° b·∫£n
        if ($response.Content -match "<title>(.*?)</title>") {
            Write-Log "üìÑ Page title: $($matches[1])"
        }
        
    }
    catch {
        Write-Log "‚ùå Kh√¥ng th·ªÉ truy c·∫≠p production site: $($_.Exception.Message)" "ERROR"
        throw "Production site kh√¥ng accessible t·∫°i: $ProductionUrl"
    }

    # C·∫£nh b√°o v·ªÅ production testing
    Write-Host "`n‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫†N ƒêANG CH·∫†Y TESTS TR√äN PRODUCTION!" -ForegroundColor Red
    Write-Host "   - Tests c√≥ th·ªÉ t·∫°o d·ªØ li·ªáu th·∫≠t tr√™n h·ªá th·ªëng production" -ForegroundColor Yellow
    Write-Host "   - H√£y ƒë·∫£m b·∫£o b·∫°n c√≥ quy·ªÅn v√† hi·ªÉu r√µ t√°c ƒë·ªông" -ForegroundColor Yellow
    Write-Host "   - Khuy·∫øn ngh·ªã: Ch·ªâ ch·∫°y read-only tests tr√™n production" -ForegroundColor Yellow
    
    $confirm = Read-Host "`nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no)"
    if ($confirm -ne "yes") {
        Write-Log "User cancelled production testing" "INFO"
        Write-Host "‚ùå ƒê√£ h·ªßy test production" -ForegroundColor Yellow
        exit 0
    }

    # X√°c ƒë·ªãnh test suite ƒë·ªÉ ch·∫°y
    $testCommand = "npx playwright test"
    
    # Production testing n√™n ch·∫°y v·ªõi headed mode ƒë·ªÉ quan s√°t
    if ($Headed -or $true) {  # Force headed for production
        $testCommand += " --headed"
        Write-Log "üñ•Ô∏è  Ch·∫°y test v·ªõi browser hi·ªÉn th·ªã (b·∫Øt bu·ªôc cho production)"
    }
    
    if ($Debug) {
        $testCommand += " --debug"
        Write-Log "üêõ Ch·∫°y test ·ªü ch·∫ø ƒë·ªô debug"
    }

    # Th√™m retry cho production
    $testCommand += " --retries=2"
    Write-Log "üîÑ S·ª≠ d·ª•ng 2 l·∫ßn retry cho production environment"

    switch ($TestSuite.ToLower()) {
        "auth" {
            $testCommand += " e2e/auth/"
            Write-Log "üîê Ch·∫°y Authentication Tests tr√™n production"
        }
        "blog" {
            Write-Log "‚ö†Ô∏è  Blog CRUD tests c√≥ th·ªÉ t·∫°o/s·ª≠a/x√≥a d·ªØ li·ªáu th·∫≠t!" "WARN"
            $blogConfirm = Read-Host "B·∫°n c√≥ ch·∫Øc mu·ªën ch·∫°y Blog CRUD tests? (yes/no)"
            if ($blogConfirm -ne "yes") {
                Write-Log "Skipped Blog CRUD tests" "INFO"
                exit 0
            }
            $testCommand += " e2e/blog/"
            Write-Log "üìù Ch·∫°y Blog CRUD Tests tr√™n production"
        }
        "contact" {
            Write-Log "‚ö†Ô∏è  Contact form tests s·∫Ω g·ª≠i email th·∫≠t!" "WARN"
            $contactConfirm = Read-Host "B·∫°n c√≥ ch·∫Øc mu·ªën ch·∫°y Contact Form tests? (yes/no)"
            if ($contactConfirm -ne "yes") {
                Write-Log "Skipped Contact Form tests" "INFO"
                exit 0
            }
            $testCommand += " e2e/contact/"
            Write-Log "üìß Ch·∫°y Contact Form Tests tr√™n production"
        }
        "workflows" {
            Write-Log "‚ö†Ô∏è  Workflow tests c√≥ th·ªÉ th·ª±c hi·ªán nhi·ªÅu thao t√°c tr√™n production!" "WARN"
            $workflowConfirm = Read-Host "B·∫°n c√≥ ch·∫Øc mu·ªën ch·∫°y Workflow tests? (yes/no)"
            if ($workflowConfirm -ne "yes") {
                Write-Log "Skipped Workflow tests" "INFO"
                exit 0
            }
            $testCommand += " e2e/workflows/"
            Write-Log "üîÑ Ch·∫°y Workflow Tests tr√™n production"
        }
        "readonly" {
            # Ch·ªâ ch·∫°y c√°c tests read-only an to√†n cho production
            $testCommand += " e2e/auth/authentication.spec.ts --grep 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng|ƒêƒÉng nh·∫≠p th·∫•t b·∫°i|Ki·ªÉm tra validation'"
            Write-Log "üëÄ Ch·∫°y Read-only tests (an to√†n cho production)"
        }
        "all" {
            Write-Log "‚ö†Ô∏è  Ch·∫°y T·∫§T C·∫¢ tests c√≥ th·ªÉ ·∫£nh h∆∞·ªüng nghi√™m tr·ªçng ƒë·∫øn production!" "WARN"
            $allConfirm = Read-Host "B·∫°n c√≥ TH·ª∞C S·ª∞ ch·∫Øc ch·∫Øn? (I-AM-SURE/no)"
            if ($allConfirm -ne "I-AM-SURE") {
                Write-Log "Cancelled full test suite on production" "INFO"
                Write-Host "‚ùå ƒê√£ h·ªßy - H√£y c√¢n nh·∫Øc ch·∫°y 'readonly' thay v√¨ 'all'" -ForegroundColor Yellow
                exit 0
            }
            Write-Log "üéØ Ch·∫°y T·∫§T C·∫¢ tests tr√™n production"
        }
        default {
            $testCommand += " $TestSuite"
            Write-Log "üéØ Ch·∫°y test: $TestSuite tr√™n production"
        }
    }

    Write-Log "Executing: $testCommand"
    Write-Log "================================================="
    
    # Ch·∫°y tests v·ªõi timeout cao h∆°n cho production
    $env:PLAYWRIGHT_TIMEOUT = "60000"  # 60 seconds
    
    Invoke-Expression $testCommand 2>&1 | Tee-Object -FilePath $logFile -Append
    
    if ($LASTEXITCODE -eq 0) {
        Write-Log "‚úÖ T·∫•t c·∫£ production tests ƒë√£ PASS!" "SUCCESS"
        Write-Host "`nüéâ PRODUCTION TESTS TH√ÄNH C√îNG!" -ForegroundColor Green
    } else {
        Write-Log "‚ùå C√≥ production tests FAILED!" "ERROR"
        Write-Host "`nüí• C√ì PRODUCTION TESTS TH·∫§T B·∫†I!" -ForegroundColor Red
        Write-Host "‚ö†Ô∏è  H√£y ki·ªÉm tra k·ªπ c√°c l·ªói tr√™n production!" -ForegroundColor Yellow
    }

    # T·∫°o report
    Write-Log "T·∫°o production test report..."
    if (Test-Path "playwright-report") {
        $reportPath = "playwright-report/index.html"
        Write-Log "üìä Production Test Report: $reportPath"
        Write-Host "üìä Production Report: " -NoNewline
        Write-Host $reportPath -ForegroundColor Cyan
        
        # Rename report ƒë·ªÉ ph√¢n bi·ªát v·ªõi dev
        $prodReportPath = "playwright-report-prod-$timestamp"
        if (Test-Path "playwright-report") {
            Move-Item "playwright-report" $prodReportPath
            Write-Log "üìä Production report saved to: $prodReportPath"
        }
    }

} catch {
    Write-Log "‚ùå L·ªói khi ch·∫°y production tests: $($_.Exception.Message)" "ERROR"
    Write-Host "`nüí• L·ªñI PRODUCTION TEST: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    Write-Log "================================================="
    Write-Log "Production test session k·∫øt th√∫c l√∫c $(Get-Date)"
    Write-Host "`nüìù Chi ti·∫øt log: $logFile" -ForegroundColor Yellow
    
    # Cleanup environment
    Remove-Item Env:PLAYWRIGHT_TIMEOUT -ErrorAction SilentlyContinue
}

# M·ªü report n·∫øu c√≥
$reportDir = Get-ChildItem -Directory -Name "playwright-report-prod-*" | Sort-Object -Descending | Select-Object -First 1
if ($reportDir -and (Test-Path "$reportDir/index.html")) {
    $openReport = Read-Host "`nB·∫°n c√≥ mu·ªën m·ªü Production HTML report kh√¥ng? (y/N)"
    if ($openReport -eq "y" -or $openReport -eq "Y") {
        Start-Process "$reportDir/index.html"
    }
}